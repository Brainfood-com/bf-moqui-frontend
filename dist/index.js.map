{"version":3,"sources":["../src/index.js"],"names":["isEqual","React","CancelablePromise","Auth","moquiBaseResolve","moquiBasePromise","resolve","reject","moquiBase","setMoquiBase","moquiApi","path","options","currentMoquiToken","applyMoquiToken","moquiToken","console","log","fetch","method","headers","body","authorization","mode","credentials","then","response","all","getToken","json","withModelApi","extractKey","fetchModel","processModel","Component","ModelApiWrapper","props","useState","undefined","key","setKey","model","setModel","isLoading","setIsLoading","pipeline","setPipeline","newKey","cancel"],"mappings":"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","sourcesContent":["import isEqual from 'lodash/isEqual'\nimport React from 'react'\nimport CancelablePromise from 'cancelable-promise'\nimport Auth from 'bf-auth-frontend-react'\n\nexport const [moquiBase, setMoquiBase] = (() => {\n  let moquiBaseResolve\n\tconst moquiBasePromise = new Promise((resolve, reject) => {\n    moquiBaseResolve = resolve\n  })\n  return [moquiBasePromise, moquiBaseResolve]\n})()\n\nexport function moquiApi(path, options = {}) {\n  let currentMoquiToken\n  function applyMoquiToken([moquiBase, moquiToken]) {\n    if (moquiToken === currentMoquiToken) {\n      return moquiBase\n    }\n    console.log('moquiToken', moquiToken)\n    return fetch(moquiBase + '/bf-auth/connect', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({\n        authorization: moquiToken,\n      }),\n      mode: 'cors',\n      credentials: 'include',\n    }).then(response => moquiBase)\n  }\n  return new CancelablePromise((resolve, reject) => {\n    Promise.all([moquiBase, Auth.getToken('moqui')]).then(applyMoquiToken).then(moquiBase => {\n      const {headers = {}} = options\n      return fetch(moquiBase + path, {\n        ...options,\n        headers: {\n          ...headers,\n        },\n        mode: 'cors',\n        credentials: 'include',\n      })\n    }).then(resolve, reject)\n  }).then(response => response.json())\n}\n\nexport function withModelApi(options = {}) {\n  const {extractKey, fetchModel, processModel} = options\n\n  return Component => {\n    return function ModelApiWrapper(props) {\n      const [key, setKey] = React.useState(undefined)\n      const [model, setModel] = React.useState(null)\n      const [isLoading, setIsLoading] = React.useState(true)\n      const [pipeline, setPipeline] = React.useState(null)\n\n      const newKey = extractKey(props)\n      if (!isEqual(key, newKey)) {\n        setKey(newKey)\n        if (pipeline) {\n          pipeline.cancel()\n        }\n        if (newKey !== undefined) {\n          if (!isLoading) {\n            setIsLoading(true)\n          }\n          setPipeline(fetchModel(newKey).then(processModel).then(setModel).then(() => setIsLoading(false), () => setIsLoading(false)))\n        } else {\n          setPipeline(null)\n        }\n      }\n\n      return <Component {...props} {...model} isLoading={isLoading}/>\n    }\n  }\n}\n"],"file":"index.js"}